Introduction to Doubly Linked List(arr to LL)




// User function Template for Java

class Solution {
    Node constructDLL(int arr[]) {
        // Code here
        
        Node head=new Node(arr[0]);
        Node mover=head;
        
        for(int i=1;i<arr.length;i++){
            
            Node newNode=new Node(arr[i]);
            mover.next=newNode;
            newNode.prev=mover;
            mover=newNode;
            
        }
        
        return head;
    }
}


-------------------------------------------------------


Reverse a Doubly Linked List




/*
class DLLNode {
    int data;
    DLLNode next;
    DLLNode prev;

    DLLNode(int val) {
        data = val;
        next = null;
        prev = null;
    }
}
*/
class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        // Your code here
        
        if(head==null || head.next==null)
        return head;
        
        DLLNode last=null;
        
        DLLNode current=head;
        
        while(current!=null){
            
            last=current.prev;
            current.prev=current.next;
            current.next=last;
            
            current=current.prev;
        }
        
        return last.prev;
    }
}


-------------------------------------------------------


Delete all occurrences of a given key in a doubly linked list




// User function Template for Java

/* Structure of Doubly Linked List
class Node
{
	int data;
	Node next;
	Node prev;
	Node(int data)
	{
	    this.data = data;
	    next = prev = null;
	}
}*/
class Solution {
    static Node deleteAllOccurOfX(Node head, int x) {
        // Write your code here
        if(head==null)
        return null;
        
        Node temp=head;
        
        while(temp!=null){
            
            if(temp.data==x){
                
                if(temp==head){
                    head=temp.next;
                }
                
                Node nextNode=temp.next;
                Node prevNode=temp.prev;
                
                if(nextNode!=null)
                nextNode.prev=prevNode;
                
                if(prevNode!=null)
                prevNode.next=nextNode;
                
                
                temp=nextNode;
            }else{
                temp=temp.next;
            }
        }
        
        return head;
    }
}


-------------------------------------------------------



Find pairs with given sum in doubly linked list




/*

Definition for singly Link List Node
class Node
{
    int data;
    Node next,prev;
    
    Node(int x){
        data = x;
        next = null;
        prev = null;
    }
}

You can also use the following for printing the link list.
Node.printList(Node node);
*/

class Solution {
    
    private static Node findTail(Node head){
        while(head.next!=null){
            head=head.next;
        }
        return head;
    }
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        // code here
        
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        // ArrayList<Integer> ins_ans=new ArrayList<>();
        
        Node start=head;
        Node tail=findTail(head);
        Node temp1=head;
        Node temp2=tail;

        
        while(temp1.data<temp2.data){
            
            if(temp1.data+temp2.data==target){
                ArrayList<Integer> ins_ans = new ArrayList<>();

                ins_ans.add(temp1.data);
                ins_ans.add(temp2.data);
                ans.add(ins_ans);

                temp1 = temp1.next;
                temp2 = temp2.prev;
                
            } else if (temp1.data+temp2.data < target) {
                temp1 = temp1.next;
            } else {
                temp2 = temp2.prev;
            }
            
        }
        
        return ans;
        
        
    }
}


-------------------------------------------------------


Remove duplicates from a sorted doubly linked list




//User function Template for Java

class Solution{
    Node removeDuplicates(Node head){
        // Code Here.
        
       if (head == null) return null;

        Node current = head;

        while (current != null && current.next != null) {
            if (current.data == current.next.data) {
                Node nextNode = current.next.next;
                current.next = nextNode;
                if (nextNode != null) {
                    nextNode.prev = current;
                }
            } else {
                current = current.next; 
            }
        }

        return head;
        
    }
}


-------------------------------------------------------


Rotate List(right)


class Solution {
    public ListNode rotateRight(ListNode head, int k) {

        ListNode temp=head;
        int cnt=1;

        if(head==null || head.next==null)
        return head;
        
        while(temp.next!=null){
            cnt++;
            temp=temp.next;
        }

        temp.next=head;
        k=k%cnt;

        ListNode nextNode=findNthNode(head,cnt-k);

        head=nextNode.next;
        nextNode.next=null;

        return head;
        
    }

    private ListNode findNthNode(ListNode head,int k){
        for(int i=1;i<k && head!=null;i++){
            head=head.next;
        }
        return head;
    }
}


-------------------------------------------------------



Rotate LL(left)



/* node of linked list:

class Node{
    int data;
    Node next;
    Node(int d){
        data=d;
        next=null;
    }
}

*/

class Solution {
    public Node rotate(Node head, int k) {
        // add code here
        
        Node temp=head;
        int cnt=1;
       
        
        while(temp.next!=null){
            cnt++;
            temp=temp.next;
        }
        
        k=k%cnt;
        
        if(k==0 || k==cnt)
        return head;
        
        temp.next=head;
        Node nextNode= findnth(head,k);
        head=nextNode.next;
        nextNode.next=null;
        
        return head;
        
        
    }
    
    private static Node findnth(Node head,int k){
        Node current=head;
        for(int i=1;i<k && current!=null;i++){
            current=current.next;
        }
        
        return current;
    }
}



-------------------------------------------------------



Sort List(Using merge)


class Solution {
    public ListNode sortList(ListNode head) {

        if(head==null || head.next==null)
        return head;

        ListNode middle=findMiddle(head);
        ListNode nextOfMiddle=middle.next;
        middle.next=null;

        ListNode left=sortList(head);
        ListNode right=sortList(nextOfMiddle);

        return merge(left,right);
        
    }

    private ListNode findMiddle(ListNode head){
        ListNode slow=head,fast=head.next;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }

        return slow;
    }

    private ListNode merge(ListNode left,ListNode right){

        ListNode dummy=new ListNode(-1);
        ListNode newHead=dummy;

        while(left!=null && right!=null){

            if(left.val<right.val){
                newHead.next=left;
                left=left.next;
            }else{
                newHead.next=right;
                right=right.next;
            }

            newHead=newHead.next;
        }

        while(left!=null){
            newHead.next=left;
            left=left.next;
            newHead = newHead.next; 
        }

        while(right!=null){
            newHead.next=right;
            right=right.next;
            newHead = newHead.next; 
        }

        return dummy.next;

    }
}



-------------------------------------------------------









