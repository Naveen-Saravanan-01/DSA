Count Linked List Nodes


class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        // code here
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            temp=temp.next;
            cnt++;
        }
        return cnt;
    }
}


-------------------------------------------------------


Search in Linked List


// User function Template for Java

/* Node of a linked list
  class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
*/
class Solution {
    static boolean searchKey(int n, Node head, int key) {
        // Code here
        Node temp=head;
        boolean ans=false;
        while(temp!=null){
            if(temp.data==key)
            ans=true;
            
            
            
            temp=temp.next;
        }
        return ans;
    }
}



-------------------------------------------------------


Linked List Insertion At End


class Solution {
    // Function to insert a node at the end of the linked list.
    Node insertAtEnd(Node head, int x) {
        // code here
        
        if(head==null)
        return new Node(x);
        
        Node temp=head;
        
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        
        Node n=new Node(x);
        temp.next=n;
        
        return head;
    }
}



-------------------------------------------------------


Delete Node in a Linked List(Without head)


class Solution {
    public void deleteNode(ListNode node) {
        if(node==null || node.next!=null)
        node.val = node.next.val; 
        node.next = node.next.next;
    }
}




-------------------------------------------------------



Count Linked List Nodes


class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        // code here
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            temp=temp.next;
            cnt++;
        }
        return cnt;
    }
}



-------------------------------------------------------



Reverse Linked List


class Solution {
    public ListNode reverseList(ListNode head) {

        ListNode temp=head;
        ListNode prev=null;

        ListNode front;

        while(temp!=null){
            front =temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;

        }

        return prev;
        
    }
}



-------------------------------------------------------



(playlist problems)


Add Two Numbers


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode dummy=new ListNode(0);
        ListNode current=dummy;
        int carry=0;

        while(l1!=null || l2!=null || carry!=0){
            int sum=carry;
            if(l1!=null){
                sum+=l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                sum+=l2.val;
                l2=l2.next;
            }

            carry=sum/10;
            current.next=new ListNode(sum%10);
            current=current.next;
        }
        return dummy.next;
    }
}



-------------------------------------------------------


Odd Even Linked List


class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head==null || head.next==null)
        return head;

        ListNode odd=head;
        ListNode even=head.next;
        ListNode evenHead=even;

        while(even!=null && even.next!=null){
            odd.next=even.next;
            odd=odd.next;

            even.next=odd.next;
            even=even.next;
        }

        odd.next=evenHead;

        return head;
    }
}



-------------------------------------------------------



Sort a linked list of 0s, 1s and 2s



class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        if (head == null || head.next == null) return head;

        
        Node zero=new Node(0), one=new Node(0), two=new Node(0);
        Node zeroHead=zero, oneHead=one, twoHead=two;
        
        Node temp=head;
        
        while(temp!=null){
            
            if(temp.data==0){
                zero.next=temp;
                zero=zero.next;
            }else if(temp.data==1){
                one.next=temp;
                one=one.next;
            }else{
                two.next=temp;
                two=two.next;
            }
            
            temp=temp.next;
        }
        
        zero.next = oneHead.next != null ? oneHead.next : twoHead.next; 
        one.next = twoHead.next;

        two.next = null;

        return zeroHead.next;
    }
}



-------------------------------------------------------


Remove Nth Node From End of List


class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {

        ListNode fast=head;
        ListNode small=head;

        if(head==null || head.next==null)
        return null;

        for(int i=0;i<n;i++){
            fast=fast.next;
        }

        if(fast==null){
            return head.next;
        }


        while(fast.next!=null){
            small=small.next;
            fast=fast.next;
        }

        small.next=small.next.next;
        return head;
        
    }
}



-------------------------------------------------------


Reverse Linked List


class Solution {
    public ListNode reverseList(ListNode head) {

        ListNode temp=head;
        ListNode prev=null;

        ListNode front;

        while(temp!=null){
            front =temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;

        }

        return prev;
        
    }
}



-------------------------------------------------------


Palindrome Linked List


class Solution {
    public boolean isPalindrome(ListNode head) {

        ListNode slow=head,fast=head;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }

        ListNode secondHalf=reverse(slow);

        ListNode temp=secondHalf;

        while(temp!=null){
            if(head.val != temp.val){
                return false;
            }

            head=head.next;
            temp=temp.next;
        }

        reverse(secondHalf);
        return true;
        
    }


    private static ListNode reverse(ListNode secondHead){

        ListNode temp=secondHead;
        ListNode prev=null;
        ListNode front=null;
        while(temp!=null){

            front=temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;

        }

        return prev;
    }
}



-------------------------------------------------------


Add 1 to a Linked List Number




/*
class Node{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}
*/

class Solution {
    
    private Node reverse(Node head){
        Node prev=null,next=head,temp=head;
        
        while(temp!=null){
            next=temp.next;
            temp.next=prev;
            prev=temp;
            temp=next;
        }
        
        return prev;
    }
    
    
    
    public Node addOne(Node head) {
        // code here.
        head=reverse(head);
        Node temp=head;
        int carry=1;
        int current;
        Node prev=null;
        while(temp!=null){
            
            current=temp.data+carry;
            temp.data=current%10;
            carry=current/10;
            prev=temp;
            temp=temp.next;
            
        }
        
        if(carry>0){
            prev.next=new Node(carry);
        }
        
        return reverse(head);
    }
}



-------------------------------------------------------


 Intersection of Two Linked Lists


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode firsthead=headA;
        ListNode secondHead=headB;
        ListNode temp1=headA,temp2=headB;

        while(temp1 != temp2){
            temp1=temp1.next;
            temp2=temp2.next;

            if(temp1==temp2)
            return temp1;

            if(temp1==null)
            temp1=secondHead;

            if(temp2==null)
            temp2=firsthead;

        } 

        return temp1;
    }
}



-------------------------------------------------------





