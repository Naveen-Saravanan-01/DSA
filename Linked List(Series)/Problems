Count Linked List Nodes


class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        // code here
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            temp=temp.next;
            cnt++;
        }
        return cnt;
    }
}


-------------------------------------------------------


Search in Linked List


// User function Template for Java

/* Node of a linked list
  class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
*/
class Solution {
    static boolean searchKey(int n, Node head, int key) {
        // Code here
        Node temp=head;
        boolean ans=false;
        while(temp!=null){
            if(temp.data==key)
            ans=true;
            
            
            
            temp=temp.next;
        }
        return ans;
    }
}



-------------------------------------------------------


Linked List Insertion At End


class Solution {
    // Function to insert a node at the end of the linked list.
    Node insertAtEnd(Node head, int x) {
        // code here
        
        if(head==null)
        return new Node(x);
        
        Node temp=head;
        
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        
        Node n=new Node(x);
        temp.next=n;
        
        return head;
    }
}



-------------------------------------------------------


Delete Node in a Linked List(Without head)


class Solution {
    public void deleteNode(ListNode node) {
        if(node==null || node.next!=null)
        node.val = node.next.val; 
        node.next = node.next.next;
    }
}




-------------------------------------------------------



Count Linked List Nodes


class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        // code here
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            temp=temp.next;
            cnt++;
        }
        return cnt;
    }
}



-------------------------------------------------------



Reverse Linked List


class Solution {
    public ListNode reverseList(ListNode head) {

        ListNode temp=head;
        ListNode prev=null;

        ListNode front;

        while(temp!=null){
            front =temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;

        }

        return prev;
        
    }
}



-------------------------------------------------------










