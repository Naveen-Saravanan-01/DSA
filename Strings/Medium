Sort Characters By Frequency


class Solution {
    public String frequencySort(String s) {

        int[] cnt=new int[26];

        char[] arr=s.toCharArray();
        StringBuilder sb=new StringBuilder();

        for(int i=0;i<arr.length;i++){
            cnt[arr[i]-'a']++;
        }

        int max=0;
        int maxCharIndex=-1;
        for(int i=0;i<26;i++){

            for(int j=0;j<26;j++){

                if(cnt[j]>max){
                max=cnt[j];
                maxCharIndex=j;
            }
            }

            for(int k=0;k<max;k++){
                sb.append((char) maxCharIndex+'a');
            }

            cnt[maxCharIndex]=0;
            
        }

        return sb.toString();
        
    }
}



-----------------------------------------------------------------


Maximum Nesting Depth of the Parentheses



class Solution {
    public int maxDepth(String s) {
        int current=0,max=0;

        char[] arr=s.toCharArray();
        for(char c:arr){
            if(c=='('){
                current++;
                max=Math.max(max,current);
            }

            if(c==')')
            current--;
        }

        return max;
    }
}



-----------------------------------------------------------------


Roman to Integer


class Solution {
    public int romanToInt(String s) {

        HashMap<Character,Integer>map=new HashMap<>();

        map.put('I',1);
        map.put('V',5);
        map.put('X',10);
        map.put('L',50);
        map.put('C',100);
        map.put('D',500);
        map.put('M',1000);

        int n=0;

        
        for(int i=0;i<s.length();i++){
            int current=map.get(s.charAt(i));

            if(i+1<s.length() && map.get(s.charAt(i+1))>current){
                n=n+map.get(s.charAt(i+1))-current;
                i++;
            }else{
                n+=current;
            }
        }
        return n;
    }
}



-----------------------------------------------------------------


Same(Using switch case)


class Solution {
    public int romanToInt(String s) {
        int ans = 0;
        boolean lastNumber = false;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (i + 1 == s.length()) {
                lastNumber = true;
            }

            switch (c) {
                case 'I':
                    if (!lastNumber && s.charAt(i + 1) == 'V') {
                        ans += 4;
                        i++;
                    } else if (!lastNumber && s.charAt(i + 1) == 'X') {
                        ans+= 9;
                        i++;
                    } else {
                        ans+= 1;
                    }
                    break;
                case 'V':
                    ans += 5;
                    break;
                case 'X':
                    if (!lastNumber && s.charAt(i + 1) == 'L') {
                        ans += 40;
                        i++;
                    } else if (!lastNumber && s.charAt(i + 1) == 'C') {
                        ans+= 90;
                        i++;
                    } else {
                        ans+= 10;
                    }
                    break;
                case 'L':
                    ans += 50;
                    break;
                case 'C':
                    if (!lastNumber && s.charAt(i + 1) == 'D') {
                        ans += 400;
                        i++;
                    } else if (!lastNumber && s.charAt(i + 1) == 'M') {
                        ans+= 900;
                        i++;
                    } else {
                        ans+= 100;
                    }
                    break;
                case 'D':
                    ans += 500;
                    break;
                case 'M':
                    ans += 1000;
                    break;
            }
        }

        return ans;
    }
}



-----------------------------------------------------------------

